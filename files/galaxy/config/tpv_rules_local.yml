global:
  default_inherits: default

tools:
  default:
#    abstract: true
    cores: 1
    mem: cores * 4
    env: {}
    params: {}
    context:
      walltime: 24
      scratch: 50
    scheduling:
      require:
        - pulsar
      reject:
        - offline
    rules: []
    rank: |
      helpers.weighted_random_sampling(candidate_destinations)

  .*testing.*:
    cores: 1
    mem: 1
    context:
      walltime: 1
    rules:
      - id: admin_only_testing_tool
        if: |
          # Only allow the tool to be executed if the user is an admin
          admin_users = app.config.admin_users
          # last line in block must evaluate to a value - which determines whether the TPV if conditional matches or not
          not user or user.email not in admin_users
        fail: Unauthorized. Only admins can execute this tool.

      - id: resource_params_defined
        if: |
          param_dict = job.get_param_values(app)
          param_dict.get('__job_resource', {}).get('__job_resource__select') == 'yes'
        cores: int(job.get_param_values(app)['__job_resource']['cores'])
        context:
           walltime: "{int(job.get_param_values(app)['__job_resource']['time'])}"

  .*/alphafold/.*:
    cores: 1
    scheduling:
      require:
        - pulsar
        - singularity
        - gpu

  toolshed.g2.bx.psu.edu/repos/iuc/megahit/megahit/.*:
    cores: 16
    mem: 256
    context:
      walltime: 96
      scratch: 100

roles:
  training.*:
    max_cores: 2
    max_mem: max_cores * 4  # TODO check multiplier
    scheduling:
      require:
        - pulsar
        - training

destinations:
  tpv_local:
    runner: local_runner
    max_accepted_cores: 1
    max_accepted_mem: 4
    params:
      tmp_dir: true
    scheduling:
      require:
        - local
      reject:
        - pulsar
        - singularity
  tpv_local_singularity:
    runner: local_runner
    max_accepted_cores: 1
    max_accepted_mem: 4
    params:
      singularity_enabled: true
    env:
      # Ensuring a consistent collation environment is good for reproducibility.
      LC_ALL: C
      # The cache directory holds the docker containers that get converted
      SINGULARITY_CACHEDIR: "/srv/galaxy/var/cache/singularity"
      # Singularity uses a temporary directory to build the squashfs filesystem
      SINGULARITY_TMPDIR: /tmp
    container_resolvers:
    - type: explicit_singularity
    - type: cached_mulled_singularity
      cache_directory: "/srv/galaxy/var/cache/singularity/mulled"
    - type: mulled_singularity
    scheduling:
      prefer:
      - singularity
      reject:
      - pulsar
  tpv_pulsar:
    runner: pulsar_tpv_runner
    max_accepted_cores: 128
    max_accepted_mem: 512
    max_accepted_gpus: 2
    max_cores: 16
    max_mem: 256
    max_gpus: 1
    params:
      default_file_action: remote_transfer
      dependency_resolution: remote
      jobs_directory: "/auto/praha5-elixir/home/galaxyeu/pulsar-cz/files/staging"
      persistence_directory: "/opt/pulsar/files/persistent"
      remote_metadata: false
      rewrite_parameters: true
      transport: curl
      outputs_to_working_directory: false
      submit_native_specification: "-l select=1:ncpus={cores}:mem={mem}gb:scratch_local={scratch}gb -l walltime={walltime}:00:00 -q galaxyeu@elixir-pbs.elixir-czech.cz -N pulsar_cz_j{job.id}__{tool.id if '/' not in tool.id else tool.id.split('/')[-2]+'_v'+tool.id.split('/')[-1]}__{user.username}"
    env:
      LC_ALL: C
      TMPDIR: $SCRATCHDIR
      TMP: $SCRATCHDIR
      TEMP: $SCRATCHDIR 
      GALAXY_SLOTS: "{cores}"
      GALAXY_MEMORY_MB: "{int(mem)*1000}"
    scheduling:
      require:
      - pulsar
      reject:
      - singularity
  tpv_pulsar_singularity:
    inherits: tpv_pulsar
    runner: pulsar_tpv_runner
    params:
      singularity_enabled: true
      singularity_volumes: "$job_directory:rw,$tool_directory:ro,$job_directory/outputs:rw,$working_directory:rw,/cvmfs/data.galaxyproject.org:ro,$SCRATCHDIR:rw"
      singularity_default_container_id: "/cvmfs/singularity.galaxyproject.org/all/python:3.8.3"
    env:
      SINGULARITY_CACHEDIR: "/auto/praha5-elixir/home/galaxyeu/pulsar-cz/files/singularity_cache"
#      SINGULARITY_CACHEDIR: "/auto/praha5-elixir/home/galaxyeu/singularity/cache"
      SINGULARITY_TMPDIR: "$SCRATCHDIR/tmp"
#      SINGULARITY_TMPDIR: "/auto/praha5-elixir/home/galaxyeu/singularity/tmp"
      XDG_CACHE_HOME: "$SCRATCHDIR"
    container_resolvers:  
    - type: explicit_singularity
#      cache_directory: "/auto/praha5-elixir/home/galaxyeu/pulsar-cz/singularity"
    - type: cached_mulled_singularity
#      cache_directory: "/auto/praha5-elixir/home/galaxyeu/pulsar-cz/files/singularity_cache"
    - type: mulled_singularity
#      cache_directory: "/auto/praha5-elixir/home/galaxyeu/pulsar-cz/singularity"
    scheduling:
      require:
      - pulsar
      - singularity
      reject:
  tpv_pulsar_gpu:
    inherits: tpv_pulsar_singularity
    runner: pulsar_gpu_runner
    params:
      singularity_run_extra_arguments: '--nv'
      singularity_volumes: '$job_directory:ro,$tool_directory:ro,$job_directory/outputs:rw,$working_directory:rw,$SCRATCHDIR,$ALPHAFOLD_DB:/data/2.3:ro'
      submit_native_specification: ""
    env:
      ALPHAFOLD_DB: "/auto/brno11-elixir/projects/alphafold/alphafold.db-2.3.1"
      ALPHAFOLD_USE_GPU: True
    scheduling:
      require:
        - pulsar
        - singularity
        - gpu
      reject:
  pulsar-training:
    inherits: tpv_pulsar_singularity
    runner: pulsar_tpv_runner
    scheduling:
      require:
        - pulsar
        - training
